desc 'Travis building iOS & tvOS'
lane :travis do
	ci_prebuild
  build_alpha(
    platform: 'iOS',
    type: 'adhoc'
	)
  ci_upload(platform: 'iOS')
  ci_prebuild(platform: 'tvOS')
	build_alpha(
    platform: 'tvOS',
    type: 'adhoc'
	)
	ci_upload(platform: 'tvOS')
end

desc 'Travis building iOS'
lane :travis_ios do
	ci_prebuild
  build_alpha(
    platform: 'iOS',
    type: 'adhoc'
	)
	ci_upload(platform: 'iOS')
end

desc 'Travis building tvOS'
lane :travis_tvos do
	ci_prebuild(platform: 'tvOS')
  build_alpha(
    platform: 'tvOS',
    type: 'adhoc'
	)
	ci_upload(platform: 'tvOS')
end

private_lane :ci_prebuild do |options|
  platform = options.fetch(:platform, 'iOS')

	load_keys

	if is_ci?
		setup_travis
		certificates_download
	end

	git_submodule_update
  rome_download
  if platform == 'iOS'
    carthage_bootstrap_ios
  else
    carthage_bootstrap_tvos
  end
end

private_lane :ci_upload do |options|
  platform = options.fetch(:platform, 'iOS')

  # SCP to file server for storage
  # if is_ci?
  build_time = Time.now.strftime('%F')

  # begin
  #   upload_to_testflight(skip_submission: true)
  # rescue => ex
  #   # don't fail the build
  #   UI.important("Testflight Something went wrong: #{ex}")
  # end

  dsym_name = File.basename(lane_context[SharedValues::DSYM_OUTPUT_PATH])

  # Push to Hockeyapp as Alpha release "2" alpha, "0" beta, "3" release
  begin
    UI.message "Upload to hockey-app with id #{$dev_domain}.provenance"
    publish_hockey(release_type: '2', platform: platform)
  rescue StandardError => ex
    # re-raise the exception unless it's something we're OK with ignoring
    # raise ex unless ex.message.include?('Error message of interest')
    # don't fail the build
    UI.important("Hockey App: Something went wrong: #{ex}")
  end

  # Upload to S3 bucket
  begin
    UI.message "Upload to S3 butcket IPA: #{ipa_name}, dSYM: #{dsym_name}"

    s3upload(ipa_name: ipa_name, dsym_name: dsym_name)
  rescue StandardError => ex
    # re-raise the exception unless it's something we're OK with ignoring
    # raise ex unless ex.message.include?('Error message of interest')
    # don't fail the build
    UI.important("S3: Something went wrong: #{ex}")
  end

  # SCP to web-server
  # begin
  #   UI.message "SCP'ing to #{build_time}"
  #   scp_upload(source: lane_context[SharedValues::IPA_OUTPUT_PATH], subfolder: build_time)
  #   scp_upload(source: lane_context[SharedValues::DSYM_OUTPUT_PATH], subfolder: build_time)
  # rescue => ex
  #     # re-raise the exception unless it's something we're OK with ignoring
  #     # raise ex unless ex.message.include?('Error message of interest')
  #   # don't fail the build
  #   UI.important("SCP Something went wrong: #{ex}")
  # end

  # uploadToWordpress(lane_context[SharedValues::IPA_OUTPUT_PATH])

  # Build tvOS app
  # match(app_identifier: ["#{$dev_domain}.provenance", "#{$dev_domain}.provenance.topshelf-extension"], type: "adhoc", platform: "tvos")
  # ipa_name = "ProvenanceTV-#{git_branch}-#{build_number}.ipa"
  # build_app(workspace: "Provenance.xcworkspace", scheme: "ProvenanceTV-Release", output_name: ipa_name, include_bitcode: false)

  # uploadToWordpress("./build/#{ipa_name}")
  # user = CredentialsManager::AppfileConfig.try_fetch_value(:apple_id)
  # keychain_entry = CredentialsManager::AccountManager.new(user: user)
  # password = keychain_entry.password
end
